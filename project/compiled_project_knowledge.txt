// ===== File: pages/api/interpret-dream.ts =====\nimport type { NextApiRequest, NextApiResponse } from 'next';

type Data = {
  interpretation?: string;
  error?: string;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', 'POST');
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { dream } = req.body;

  if (!dream || typeof dream !== 'string') {
    return res.status(400).json({ error: 'Invalid dream input' });
  }

  try {
    // Call to n8n webhook or serverless function that integrates with GPT-4
    // For MVP, simulate the call here or replace with actual fetch to n8n endpoint

    // Example: Replace with your actual n8n webhook URL
    const n8nWebhookUrl = process.env.N8N_WEBHOOK_URL;
    if (!n8nWebhookUrl) {
      return res.status(500).json({ error: 'N8N webhook URL not configured' });
    }

    const response = await fetch(n8nWebhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ dream }),
    });

    if (!response.ok) {
      throw new Error('Failed to get interpretation from n8n');
    }

    const data = await response.json();

    // Assuming n8n returns { interpretation: string }
    return res.status(200).json({ interpretation: data.interpretation });
  } catch (error: any) {
    return res.status(500).json({ error: error.message || 'Internal server error' });
  }
}
\n\n// ===== File: app/page.tsx =====\n
'use client';

import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { useState } from 'react';
import { PageBackground } from '@/components/page-background';
import { Logo } from '@/components/brand/logo';

export default function Home() {
  const [dream, setDream] = useState('');
  const [interpretation, setInterpretation] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  async function handleInterpret() {
    setLoading(true);
    setError(null);
    setInterpretation(null);
    try {
      const response = await fetch('/api/interpret-dream', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ dream }),
      });
      if (!response.ok) {
        throw new Error('Failed to get interpretation');
      }
      const data = await response.json();
      setInterpretation(data.interpretation);
    } catch (err: any) {
      setError(err.message || 'Unknown error');
    } finally {
      setLoading(false);
    }
  }

  return (
    <PageBackground>
      {/* Login link */}
      <div className="absolute top-6 right-6 z-20">
        <Link
          href="/login"
          className="text-purple-300/80 hover:text-purple-300 text-sm font-light transition-colors"
        >
          Already have an account? Sign in
        </Link>
      </div>

      {/* Main content */}
      <div className="relative z-10 max-w-4xl mx-auto px-4 py-12 flex flex-col min-h-screen justify-center items-center text-center">
        <div className="mb-[6vh] flex flex-col items-center">
          <Logo />
        </div>

        {/* Headline */}
        <div className="mb-4 text-center">
          <h2 className="text-2xl font-semibold text-white">
            Your dreams are encrypted messages.<br />
            We help you decode them.
          </h2>
        </div>

        {/* Input and button */}
        <div className="w-full max-w-md mx-auto space-y-2">
          <textarea
            value={dream}
            onChange={(e) => setDream(e.target.value)}
            placeholder="Type your dream here..."
            rows={6}
            className="w-full rounded-md border border-purple-600 bg-transparent p-4 text-white placeholder-purple-400 focus:outline-none focus:ring-2 focus:ring-purple-500"
          />
          <Button
            onClick={handleInterpret}
            disabled={loading || dream.trim() === ''}
            className="w-full"
          >
            {loading ? 'Interpreting...' : 'Interpret my dream'}
          </Button>

          <p className="text-center text-sm text-purple-300">
            âš¡ AI + Jungian Psychology +<br />
            No login. No tracking. Just meaning.
          </p>

          {error && (
            <p className="text-red-500 text-sm font-medium">{error}</p>
          )}

          {interpretation && (
            <div className="mt-6 rounded-md border border-purple-600 bg-purple-900 p-4 text-left text-white">
              <h3 className="mb-2 text-lg font-semibold">Interpretation</h3>
              <p>{interpretation}</p>
              <div className="mt-4 flex space-x-4">
                <Button
                  variant="outline"
                  onClick={() => {
                    navigator.clipboard.writeText(interpretation);
                  }}
                >
                  Copy Interpretation
                </Button>
                <Button
                  variant="outline"
                  onClick={() => {
                    // Placeholder for share or subscribe action
                    alert('Share or subscribe feature coming soon!');
                  }}
                >
                  Share / Subscribe
                </Button>
              </div>
            </div>
          )}
        </div>
      </div>
    </PageBackground>
  );
}
\n\n// ===== File: app/(dashboard)/dashboard/decoder/page.tsx =====\n"use client";

import { BackgroundEffects } from '@/components/background-effects';

export default function DecoderPage() {
  return (
    <>
      <BackgroundEffects />
      <div className="space-y-8 relative z-10">
        <div className="space-y-2">
          <h1 className="text-3xl font-bold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-violet-200 to-purple-200">
            Dream Decoder
          </h1>
          <p className="text-lg text-violet-200/80">
            Uncover patterns and insights from your dreams
          </p>
        </div>

        <div className="bg-black/40 backdrop-blur-sm rounded-lg border border-white/5 p-8">
          <div className="text-center">
            <p className="text-purple-200/60">
              Your dream analysis insights will appear here
            </p>
          </div>
        </div>
      </div>
    </>
  );
}\n\n// ===== File: lib/services/dream-service.ts =====\nimport { supabase, isMockSupabase } from '../config/supabase';
import { mockDreamAnalyses } from '../mocks/profile-mocks';

export class DreamService {
  static async getDreamAnalyses(userId: string) {
    if (isMockSupabase) {
      return { data: mockDreamAnalyses, error: null };
    }

    const { data, error } = await supabase
      .from('dream_analyses')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false });
    
    if (error) throw error;
    return data;
  }

  static async createDreamAnalysis(userId: string, dreamContent: string, analysis: string) {
    if (isMockSupabase) {
      return { data: mockDreamAnalyses[0], error: null };
    }

    const { error } = await supabase
      .from('dream_analyses')
      .insert({
        user_id: userId,
        dream_content: dreamContent,
        analysis: analysis
      });
    
    if (error) throw error;
  }
}\n\n// ===== File: lib/services/profile-service.ts =====\nimport { supabase, isMockSupabase } from '../config/supabase';
import { mockProfile } from '../mocks/profile-mocks';

export class ProfileService {
  static async createProfile(userId: string, name: string, email: string) {
    if (isMockSupabase) {
      return { data: mockProfile, error: null };
    }

    const { error } = await supabase
      .from('profiles')
      .insert({
        id: userId,
        name,
        email,
        credits: 5
      });
    
    if (error) throw error;
  }

  static async getProfile(userId: string) {
    if (isMockSupabase) {
      return { data: mockProfile, error: null };
    }

    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (error) throw error;
    return data;
  }

  static async updateCredits(userId: string, credits: number) {
    if (isMockSupabase) {
      return { data: { ...mockProfile, credits }, error: null };
    }

    const { error } = await supabase
      .from('profiles')
      .update({ credits })
      .eq('id', userId);
    
    if (error) throw error;
  }
}\n\n// ===== File: lib/types/database.types.ts =====\nexport type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string
          created_at: string
          name: string
          credits: number
          email: string
        }
        Insert: {
          id: string
          created_at?: string
          name: string
          credits?: number
          email: string
        }
        Update: {
          id?: string
          created_at?: string
          name?: string
          credits?: number
          email?: string
        }
      }
      dream_analyses: {
        Row: {
          id: string
          created_at: string
          user_id: string
          dream_content: string
          analysis: string
        }
        Insert: {
          id?: string
          created_at?: string
          user_id: string
          dream_content: string
          analysis: string
        }
        Update: {
          id?: string
          created_at?: string
          user_id?: string
          dream_content?: string
          analysis?: string
        }
      }
    }
  }
}\n\n// ===== File: types/dreams.ts =====\nexport type DreamMood = 'positive' | 'neutral' | 'negative';

export interface Symbol {
  name: string;
  category: string;
  relevance: number;
  occurrences: number;
  description: string;
}

export interface Connection {
  dreamId: number;
  date: string;
  commonSymbols: Symbol[];
  strength: number;
}

export interface Dream {
  id: number;
  date: string;
  content: string;
  analysis: string;
  mood: DreamMood;
  clarity: number;
  symbols: Symbol[];
  hasConnections: boolean;
  connections?: Connection[];
  lunarPhase: string;
  dayOfWeek: string;
  sleepQuality: number;
  insights: number;
  patterns: string[];
}\n\n// ===== File: lib/config/constants.ts =====\nexport const DEVELOPMENT_CONFIG = {
  supabaseUrl: 'https://mock-project-id.supabase.co',
  supabaseKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.mock-key'
} as const;\n\n// ===== File: lib/utils.ts =====\nimport { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
\n\n// ===== File: components/chat/voiceflow-chat.tsx =====\n"use client";

import { useEffect } from 'react';
import Script from 'next/script';

declare global {
  interface Window {
    voiceflow: {
      chat: {
        load: (config: any) => void;
        open: () => void;
        close: () => void;
        hide: () => void;
        show: () => void;
        interact: (action: any) => void;
        proactive: {
          push: (...messages: any[]) => void;
          clear: () => void;
        };
      };
    };
  }
}

export function VoiceflowChat() {
  useEffect(() => {
    // Initialize chat when component mounts
    const initChat = () => {
      if (window.voiceflow?.chat) {
        window.voiceflow.chat.load({
          verify: { 
            projectID: process.env.NEXT_PUBLIC_VOICEFLOW_PROJECT_ID 
          },
          url: process.env.NEXT_PUBLIC_VOICEFLOW_RUNTIME_URL || 'https://general-runtime.voiceflow.com',
          versionID: process.env.NEXT_PUBLIC_VOICEFLOW_VERSION_ID || 'development',
          assistant: {
            title: 'Dream Guide',
            description: 'Your personal dream interpretation assistant',
            color: '#8B5CF6',
          }
        });
      }
    };

    // Try to initialize immediately if script is already loaded
    initChat();

    return () => {
      // Hide chat when component unmounts
      window.voiceflow?.chat?.hide();
    };
  }, []);

  return (
    <Script
      src="https://cdn.voiceflow.com/widget/bundle.mjs"
      strategy="afterInteractive"
      onLoad={() => {
        window.voiceflow?.chat?.load({
          verify: { 
            projectID: process.env.NEXT_PUBLIC_VOICEFLOW_PROJECT_ID 
          }
        });
      }}
    />
  );
}\n\n// ===== File: app/(dashboard)/dashboard/journal/page.tsx =====\n"use client";

import { DreamJournal } from '@/components/journal/dream-journal';

export default function JournalPage() {
  return <DreamJournal />;
}\n\n// ===== File: components/journal/dream-journal.tsx =====\n"use client";

import { Search, Calendar, Tags, SortDesc } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { DreamGrid } from './dream-grid';
import { BackgroundEffects } from '@/components/background-effects';
import { motion } from 'framer-motion';
import { useState } from 'react';
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { DateRangePicker } from '@/components/ui/date-range-picker';
import { TagSelector } from './tag-selector';

export function DreamJournal() {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDates, setSelectedDates] = useState<Date[]>([]);
  const [selectedTags, setSelectedTags] = useState<string[]>([]);
  const [sortOrder, setSortOrder] = useState<'newest' | 'oldest'>('newest');

  const availableTags = ['flying', 'nature', 'wisdom', 'water', 'light', 'mystery', 'crystals', 'memories', 'exploration'];

  const handleSearch = (query: string) => {
    setSearchQuery(query);
  };

  const handleDateSelect = (dates: Date[] | undefined) => {
    setSelectedDates(dates || []);
  };

  const handleTagSelect = (tag: string) => {
    setSelectedTags(prev => 
      prev.includes(tag) 
        ? prev.filter(t => t !== tag)
        : [...prev, tag]
    );
  };

  const handleSelectAllTags = () => {
    setSelectedTags(availableTags);
  };

  const handleClearTags = () => {
    setSelectedTags([]);
  };

  return (
    <>
      <BackgroundEffects />
      <div className="space-y-8 relative z-10">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="flex flex-col items-center space-y-3"
        >
          <h1 className="text-4xl font-display text-purple-100 tracking-tight">
            Dream Journal
          </h1>
          <p className="text-sm text-purple-200/70 font-light">
            Your personal dream library
          </p>
        </motion.div>

        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
          className="flex items-center gap-4"
        >
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-purple-300/50" />
            <Input 
              placeholder="Search your dreams..."
              className="pl-10 bg-black/40 border-purple-500/20 text-purple-100 h-8 placeholder:text-xs"
              value={searchQuery}
              onChange={(e) => handleSearch(e.target.value)}
            />
          </div>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="outline"
                className="bg-black/40 border-purple-500/20 text-purple-200 hover:bg-purple-500/10 h-8 font-light text-xs"
              >
                <Calendar className="w-3 h-3 mr-2" />
                Date
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="bg-black/95 border-purple-500/20 p-4 w-auto">
              <DateRangePicker
                selected={selectedDates}
                onSelect={handleDateSelect}
              />
            </DropdownMenuContent>
          </DropdownMenu>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="outline"
                className="bg-black/40 border-purple-500/20 text-purple-200 hover:bg-purple-500/10 h-8 font-light text-xs"
              >
                <Tags className="w-3 h-3 mr-2" />
                Tags {selectedTags.length > 0 && `(${selectedTags.length})`}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent 
              className="bg-black/95 border-purple-500/20"
              onCloseAutoFocus={(e) => e.preventDefault()}
            >
              <TagSelector
                availableTags={availableTags}
                selectedTags={selectedTags}
                onTagSelect={handleTagSelect}
                onSelectAll={handleSelectAllTags}
                onClear={handleClearTags}
              />
            </DropdownMenuContent>
          </DropdownMenu>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="outline"
                className="bg-black/40 border-purple-500/20 text-purple-200 hover:bg-purple-500/10 h-8 font-light text-xs"
              >
                <SortDesc className="w-3 h-3 mr-2" />
                Sort
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="bg-black/95 border-purple-500/20">
              <DropdownMenuItem 
                onClick={() => setSortOrder('newest')}
                className="text-xs"
              >
                Newest First
              </DropdownMenuItem>
              <DropdownMenuItem 
                onClick={() => setSortOrder('oldest')}
                className="text-xs"
              >
                Oldest First
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
        >
          <DreamGrid
            searchQuery={searchQuery}
            selectedDate={selectedDates[0]}
            selectedTags={selectedTags}
            sortOrder={sortOrder}
          />
        </motion.div>
      </div>
    </>
  );
}\n\n// ===== File: components/journal/dream-card.tsx =====\n"use client";

import { Pencil, Trash2 } from 'lucide-react';
import { CardContainer } from '../dashboard/cards/card-container';
import { Button } from '../ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';
import { useState } from 'react';
import { Textarea } from '../ui/textarea';
import { Input } from '../ui/input';
import { motion } from 'framer-motion';
import { cn } from '@/lib/utils';

interface DreamCardProps {
  dream: {
    id: number;
    title: string;
    date: string;
    content: string;
    tags: string[];
    mood: string;
  };
  onUpdate?: (id: number, data: any) => void;
  onDelete?: (id: number) => void;
}

export function DreamCard({ dream, onUpdate, onDelete }: DreamCardProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [editedContent, setEditedContent] = useState(dream.content);
  const [editedTags, setEditedTags] = useState(dream.tags.join(', '));
  const [isOpen, setIsOpen] = useState(false);

  const handleSave = () => {
    const updatedDream = {
      ...dream,
      content: editedContent,
      tags: editedTags.split(',').map(tag => tag.trim()).filter(Boolean)
    };
    onUpdate?.(dream.id, updatedDream);
    setIsEditing(false);
  };

  const handleDelete = () => {
    onDelete?.(dream.id);
    setIsOpen(false);
  };

  const truncatedContent = dream.content.split('.')[0] + '...';
  const formattedDate = new Date(dream.date).toLocaleString('en-US', {
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <div className="cursor-pointer" onClick={() => setIsOpen(true)}>
          <CardContainer>
            <div className="space-y-4">
              {/* Header */}
              <div className="flex justify-between items-start">
                <div className="space-y-1">
                  <h3 className="text-lg font-medium text-purple-100">{dream.title}</h3>
                  <p className="text-xs text-purple-200/60">{formattedDate}</p>
                </div>
                <span className="text-xs text-purple-200/80 px-3 py-1.5 rounded-full bg-purple-500/10 border border-purple-500/20">
                  {dream.mood}
                </span>
              </div>

              {/* Content */}
              <p className="text-sm text-purple-200/80">
                {truncatedContent}
              </p>

              {/* Tags */}
              <div className="flex flex-wrap gap-2">
                {dream.tags.map((tag, index) => (
                  <span
                    key={index}
                    className="text-xs px-2 py-1 rounded-full 
                      bg-purple-500/10 text-purple-200/70
                      border border-purple-500/10"
                  >
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          </CardContainer>
        </div>

        <DialogContent className="bg-gradient-to-b from-black/95 via-purple-900/20 to-black/95 backdrop-blur-xl border-purple-500/20">
          <DialogHeader>
            <DialogTitle className="text-2xl font-display">{dream.title}</DialogTitle>
            <div className="text-xs text-purple-200/60">{formattedDate}</div>
          </DialogHeader>

          <div className="space-y-6 py-4">
            {isEditing ? (
              <div className="space-y-4">
                <Textarea
                  value={editedContent}
                  onChange={(e) => setEditedContent(e.target.value)}
                  className="min-h-[200px] bg-black/40 border-purple-500/20"
                />
                <div className="space-y-2">
                  <label className="text-sm text-purple-200/80">Tags (comma-separated)</label>
                  <Input
                    value={editedTags}
                    onChange={(e) => setEditedTags(e.target.value)}
                    className="bg-black/40 border-purple-500/20"
                    placeholder="nature, flying, wisdom"
                  />
                </div>
              </div>
            ) : (
              <p className="text-purple-200/80 whitespace-pre-wrap">{dream.content}</p>
            )}

            <div className="flex flex-wrap gap-2">
              {dream.tags.map((tag, index) => (
                <span
                  key={index}
                  className="text-xs px-2 py-1 rounded-full 
                    bg-purple-500/10 text-purple-200/70
                    border border-purple-500/10"
                >
                  {tag}
                </span>
              ))}
            </div>

            <div className="flex justify-end gap-3">
              {isEditing ? (
                <>
                  <Button
                    variant="outline"
                    onClick={() => setIsEditing(false)}
                    className="border-purple-500/20"
                  >
                    Cancel
                  </Button>
                  <Button onClick={handleSave}>Save Changes</Button>
                </>
              ) : (
                <>
                  <Button
                    variant="outline"
                    onClick={() => setIsEditing(true)}
                    className="border-purple-500/20"
                  >
                    <Pencil className="w-4 h-4 mr-2" />
                    Edit
                  </Button>
                  <Button
                    variant="destructive"
                    onClick={handleDelete}
                  >
                    <Trash2 className="w-4 h-4 mr-2" />
                    Delete
                  </Button>
                </>
              )}
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </motion.div>
  );
}\n\n// ===== File: components/journal/dream-grid.tsx =====\n"use client";

import { DreamCard } from './dream-card';
import { useState } from 'react';

const initialDreams = [
  {
    id: 1,
    title: "Flying Over Ancient Forests",
    date: "2024-02-28T08:30:00",
    content: "Soaring above ancient trees, their branches reaching up like fingers trying to touch the sky. The wind carried whispers of forgotten wisdom. As I flew higher, the forest below transformed into a tapestry of emerald and gold, each leaf holding a memory of times long past. The air was crisp and filled with the scent of pine and morning dew.",
    tags: ["flying", "nature", "wisdom"],
    mood: "positive"
  },
  {
    id: 2,
    title: "Ocean's Depths",
    date: "2024-02-27T23:15:00",
    content: "Descending into the deep blue, surrounded by bioluminescent creatures. A golden light emerged from the depths, calling. The water felt warm and welcoming, like being embraced by liquid silk. Schools of ethereal fish swam past, their scales reflecting rainbow patterns that danced through the water.",
    tags: ["water", "light", "mystery"],
    mood: "neutral"
  },
  {
    id: 3,
    title: "The Crystal Cave",
    date: "2024-02-26T03:45:00",
    content: "Walking through a cave filled with crystals of every color. Each one seemed to hold a different memory, a different story. The crystals hummed with an ancient energy, their facets reflecting not just light, but glimpses of other worlds and possibilities. The air was thick with possibility and wonder.",
    tags: ["crystals", "memories", "exploration"],
    mood: "positive"
  }
];

interface DreamGridProps {
  searchQuery?: string;
  selectedDate?: Date;
  selectedTags?: string[];
  sortOrder?: 'newest' | 'oldest';
}

export function DreamGrid({ 
  searchQuery = '', 
  selectedDate,
  selectedTags = [],
  sortOrder = 'newest'
}: DreamGridProps) {
  const [dreams, setDreams] = useState(initialDreams);

  const handleUpdate = (id: number, updatedDream: any) => {
    setDreams(prev => prev.map(dream => 
      dream.id === id ? { ...dream, ...updatedDream } : dream
    ));
  };

  const handleDelete = (id: number) => {
    setDreams(prev => prev.filter(dream => dream.id !== id));
  };

  let filteredDreams = dreams;

  // Apply search filter
  if (searchQuery) {
    const query = searchQuery.toLowerCase();
    filteredDreams = filteredDreams.filter(dream =>
      dream.title.toLowerCase().includes(query) ||
      dream.content.toLowerCase().includes(query) ||
      dream.tags.some(tag => tag.toLowerCase().includes(query))
    );
  }

  // Apply date filter
  if (selectedDate) {
    const selectedDateStr = selectedDate.toDateString();
    filteredDreams = filteredDreams.filter(dream =>
      new Date(dream.date).toDateString() === selectedDateStr
    );
  }

  // Apply tags filter
  if (selectedTags.length > 0) {
    filteredDreams = filteredDreams.filter(dream =>
      selectedTags.some(tag => dream.tags.includes(tag))
    );
  }

  // Apply sorting
  filteredDreams = [...filteredDreams].sort((a, b) => {
    const dateA = new Date(a.date).getTime();
    const dateB = new Date(b.date).getTime();
    return sortOrder === 'newest' ? dateB - dateA : dateA - dateB;
  });

  return (
    <div className="space-y-4">
      {filteredDreams.map((dream) => (
        <DreamCard 
          key={dream.id} 
          dream={dream}
          onUpdate={handleUpdate}
          onDelete={handleDelete}
        />
      ))}
    </div>
  );
}\n\n// ===== File: components/journal/tag-selector.tsx =====\n"use client";

import { Check, X } from 'lucide-react';
import { Button } from '@/components/ui/button';

interface TagSelectorProps {
  availableTags: string[];
  selectedTags: string[];
  onTagSelect: (tag: string) => void;
  onSelectAll: () => void;
  onClear: () => void;
}

export function TagSelector({
  availableTags,
  selectedTags,
  onTagSelect,
  onSelectAll,
  onClear
}: TagSelectorProps) {
  return (
    <div className="p-2 space-y-2" onClick={(e) => e.stopPropagation()}>
      <div className="flex items-center justify-between gap-2">
        <Button
          variant="ghost"
          size="sm"
          onClick={onSelectAll}
          className="text-xs h-7 px-2"
        >
          <Check className="w-3 h-3 mr-1" />
          Select All
        </Button>
        <Button
          variant="ghost"
          size="sm"
          onClick={onClear}
          className="text-xs h-7 px-2"
        >
          <X className="w-3 h-3 mr-1" />
          Clear
        </Button>
      </div>
      
      <div className="space-y-1 max-h-[200px] overflow-y-auto custom-scrollbar">
        {availableTags.map(tag => (
          <div
            key={tag}
            onClick={() => onTagSelect(tag)}
            className="flex items-center gap-2 px-2 py-1.5 hover:bg-purple-500/20 rounded-sm cursor-pointer"
          >
            <div className={`w-2 h-2 rounded-full ${
              selectedTags.includes(tag) ? 'bg-purple-500' : 'bg-purple-500/20'
            }`} />
            <span className="capitalize text-xs text-purple-200/80">{tag}</span>
          </div>
        ))}
      </div>
    </div>
  );
}\n\n